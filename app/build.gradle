apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply from: '../config/quality.gradle'

import com.android.ddmlib.DdmPreferences

import java.util.concurrent.TimeUnit

// Copy the signing.properties.sample file to ~/.sign/signing.properties and adjust the values.
final File PROD_PROPS_FILE = new File(System.getProperty('user.home'), '.sign/signing.properties')
final File REPO_PROPS_FILE = new File('repo.properties')
final Properties PROD_PROPS = loadProperties(PROD_PROPS_FILE)
final Properties REPO_PROPS = loadProperties(REPO_PROPS_FILE)

final int ADB_TIMEOUT = TimeUnit.MINUTES.toMillis(5)
final boolean continuousIntegrationBuild = System.getenv('JENKINS_HOME') != null
final boolean preDexEnabled = hasProperty('pre.dex') ?
        Boolean.valueOf(getProperty('pre.dex').toString()) :
        !continuousIntegrationBuild
if (!preDexEnabled) {
    println 'Pre-dexing disabled.'
}

if (continuousIntegrationBuild) {
    DdmPreferences.setTimeOut(ADB_TIMEOUT)
    println "Device timeout is ${DdmPreferences.getTimeOut()}ms"
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd')
    return formattedDate
}

def computeVersionName(label) {
    return "2.1.${android.defaultConfig.versionCode}-${label}-${date}"
}

final JavaVersion JAVA_VERSION = JavaVersion.VERSION_1_7
if (JavaVersion.current() != JAVA_VERSION) {
    throw new IllegalStateException("Incorrect Java Development Kit version; expected "
            + JAVA_VERSION + " but found " + JavaVersion.current())
}

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'
    compileOptions {
        sourceCompatibility = JAVA_VERSION
        targetCompatibility = JAVA_VERSION
    }
    dexOptions {
        preDexLibraries = preDexEnabled
    }
    defaultConfig {
        applicationId 'org.ieatta'
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 141
        ndk {
            // TODO: remove when updated Mapbox SDK starts shipping arm64 libraries.
            abiFilters "armeabi", "armeabi-v7a", "x86", "mips"
        }
        testApplicationId 'org.ieatta.test'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    sourceSets {
        test {
            java.srcDirs += 'src/testlib/java'
        }
        androidTest {
            java.srcDirs += 'src/testlib/java'
        }
    }

    signingConfigs {
        prod {
            setSigningConfigKey(prod, PROD_PROPS)
        }
        debug {
            setSigningConfigKey(debug, REPO_PROPS)
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFile 'test-proguard-rules.pro'
        }
    }

    productFlavors {
        dev {
            versionName computeVersionName("dev")
            applicationId 'org.ieatta.dev'
            signingConfig signingConfigs.debug
        }
        prod {
            versionName computeVersionName("r")
            signingConfig signingConfigs.prod
        }
        releasesprod {
            versionName computeVersionName("releasesprod")
            signingConfig signingConfigs.prod
        }
        alpha {
            versionName computeVersionName("alpha")
            applicationId 'org.ieatta.alpha'
            signingConfig signingConfigs.debug
        }
        beta {
            versionName computeVersionName("beta")
            applicationId 'org.ieatta.beta'
            signingConfig signingConfigs.prod
        }
        amazon {
            versionName computeVersionName("amazon")
            signingConfig signingConfigs.prod
        }
    }
    // while we still have lint errors; remove once those are fixed
    lintOptions {
        disable 'MissingTranslation'
        warning 'NewApi' // until https://code.google.com/p/android/issues/detail?id=137195 is released
        disable 'InvalidPackage' // required by Butter Knife
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor' // required by Butter Knife

        // For Espresso testing libraries. See http://stackoverflow.com/q/33800924/970346.
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
    }
}

def compileSubprojectOrModule = { String projectName,
                                  String moduleName,
                                  String excludeGroup = null,
                                  String excludeModule = null ->
    def dependency = project.findProject(projectName) ?: moduleName
    project.dependencies.add('compile', dependency, {exclude group: excludeGroup, module: excludeModule })
}

dependencies {
//    compileSubprojectOrModule ':java-mwapi:json', 'org.mediawiki.api:json:1.3.3', 'org.json', 'json'

    // To keep the Maven Central dependencies up-to-date
    // use http://gradleplease.appspot.com/ or http://search.maven.org/.
    // Debug with ./gradlew -q app:dependencies --configuration compile

    String okHttpVersion = '2.7.2'
    String supportVersion = '23.1.1'
    String espressoVersion = '2.2.1'

    compile "com.android.support:appcompat-v7:$supportVersion" // includes support-v4
    compile "com.android.support:design:$supportVersion"
    compile "com.android.support:recyclerview-v7:$supportVersion"
    compile "com.android.support:percent:$supportVersion"
    compile "com.android.support:palette-v7:$supportVersion"
    compile 'com.facebook.fresco:fresco:0.8.1'
    compile 'com.google.code.gson:gson:2.5'
    compile "com.squareup.okhttp:okhttp-urlconnection:$okHttpVersion"
    compile "com.squareup.okhttp:okhttp:$okHttpVersion"
    compile 'com.squareup:otto:1.3.8'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.mobsandgeeks:android-saripaar:2.0.3'
    compile 'com.github.ryanjohn1:onboarding:1.0.3'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.jakewharton:disklrucache:2.0.2'
    compile('com.mapbox.mapboxsdk:mapbox-android-sdk:2.3.0@aar') {
        transitive = true
    }
    compile 'net.hockeyapp.android:HockeySDK:3.7.0'

    // Stetho is a sophisticated debug bridge for Android applications.
    // for okhttp:2.7.2
    compile 'com.facebook.stetho:stetho-okhttp:1.3.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile "com.squareup.okhttp:mockwebserver:$okHttpVersion"

    // Required by Android JUnit Runner.
    androidTestCompile "com.android.support:support-annotations:$supportVersion"

    androidTestCompile 'com.android.support.test:rules:0.4.1' // JUnit Rules
    androidTestCompile 'com.android.support.test:runner:0.4.1' // Android JUnit Runner
    androidTestCompile "com.android.support.test.espresso:espresso-core:$espressoVersion"

    // Espresso-contrib for DatePicker, RecyclerView, Drawer actions, Accessibility checks,
    // CountingIdlingResource
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:$espressoVersion") {
        // http://stackoverflow.com/questions/30578243/why-would-adding-espresso-contrib-cause-an-inflateexception
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }

    // Espresso-web for WebView support
    androidTestCompile "com.android.support.test.espresso:espresso-web:$espressoVersion"

    // Espresso-idling-resource for synchronization with background jobs.
    androidTestCompile "com.android.support.test.espresso:espresso-idling-resource:$espressoVersion"

    androidTestCompile 'com.squareup.spoon:spoon-client:1.3.1'
}

private setSigningConfigKey(config, Properties props) {
    if (props) {
        config.storeFile = props['keystore'] == null ? null : file(props['keystore'])
        config.storePassword = props['store.pass']
        config.keyAlias = props['key.alias']
        config.keyPassword = props['key.pass']
    }
    return config
}

@Nullable private Properties loadProperties(File file) {
    Properties props = null
    if (file.canRead()) {
        props = new Properties()
        props.load(new FileInputStream(file))
    } else {
        System.err.println "\"${file}\" not found"
    }
    return props
}
